<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Sistemi-Operativi on X. Angelo Huang&#39;s Blog</title>
    <link>https://flecart.github.io/tags/sistemi-operativi/</link>
    <description>Recent content in Sistemi-Operativi on X. Angelo Huang&#39;s Blog</description>
    <image>
      <title>X. Angelo Huang&#39;s Blog</title>
      <url>https://flecart.github.io/images/papermod-cover.png</url>
      <link>https://flecart.github.io/images/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <atom:link href="https://flecart.github.io/tags/sistemi-operativi/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Message Passing</title>
      <link>https://flecart.github.io/notes/message-passing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://flecart.github.io/notes/message-passing/</guid>
      <description>ora abbiamo alcune primitive per passarci i messaggi, vogliamo creare metodo in modo che i processi si possano sincronizzare mandando messaggi.
la memoria Ã¨ sempre privata.
Primitive Send e receive ðŸŸ© Send
Spedizione del messaggio input deve avere un identificato al processo su cui spedire. Se si vuole espandere si possono avere multicast e broadcasting ma non li studieremo in questo corso.
Receive
Ricevi messaggi
Tassonomia dei message passing (!)ðŸŸ© Slide</description>
    </item>
    <item>
      <title>Monitor</title>
      <link>https://flecart.github.io/notes/monitor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://flecart.github.io/notes/monitor/</guid>
      <description>Questo Ã¨ un modo di piÃ¹ alto livello per creare programmazione concorrente.
Introduzione ai monitor Questo costrutto per la programmazione concorrente, prende molto dalla programmazione agli oggetti, abbiamo delle variabili presenti al monitor, private solamente accessibili ad essa, tramite procedure che sono mutex automaticamente!
Elementi costituenti ðŸŸ© Dati locali Sequenza di inizializzazione Procedure di entrata Appena provo a chiamare una procedura, questa Ã¨ fatta giÃ  in mutua esclusione!.
E possono modificare dati locali solo tramite chiamate a sue procedure</description>
    </item>
    <item>
      <title>Paginazione e segmentazione</title>
      <link>https://flecart.github.io/notes/paginazione-e-segmentazione/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://flecart.github.io/notes/paginazione-e-segmentazione/</guid>
      <description>Memoria sistema Operativo Guradare Memoria virtuale Per vedere come vengono rimpiazzate le pagine
In quest sezione andiamo a parlare di come fanno molti processi a venire eseguiti insieme, anche se lo spazio di memoria fisico Ã¨ lo stesso. Andiamo quindi a parlare di spazio di indirizzi, risoluzione di questi indirizzi logici, segmentazione e paginazione. (e molto di piÃ¹!)
MMU Controlla se lâ€™accesso di memoria Ã¨ bono o meno. (traduzione fra indirizzo logico e fisico)</description>
    </item>
    <item>
      <title>Devices OS</title>
      <link>https://flecart.github.io/notes/devices-os/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://flecart.github.io/notes/devices-os/</guid>
      <description>Devices Categorizzazione (6)ðŸŸ¨- Trasferimento dei dati Accesso al device sinfonia del trasferimento condivisone fra processi VelocitÃ  del trasferimento I/O direction (scrittura o lettura) Vediamo che molte caratteristiche sono riguardo il trasferimento
Slide categorizzazione I/O
Blocchi o caratteri ðŸŸ©- Slide devices blocchi o caratteri
Tecniche di gestione devices (4) ðŸŸ¨- Buffering Possiamo mettere un buffer per favorire la comunicazione fra i devices. la cos amigliore che fa Ã¨ creare maggiore efficienza. Un altro motivo Ã¨ la velocitÃ  diversa di consumo.</description>
    </item>
    <item>
      <title>Scheduler</title>
      <link>https://flecart.github.io/notes/scheduler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://flecart.github.io/notes/scheduler/</guid>
      <description>Il suo scopo principale Ã¨ gestire l&amp;rsquo;avvicendamento dei processi. Ad esempio sospendere il processo che chiede I/O. O un sistema time sharing, quando arriva un interrupt sul time.
Solitamente il nome scheduler Ã¨ solamente un gestore dell&amp;rsquo;avvicendamento, si puÃ² quindi utilizzare per indicare scheduler di altro tipo.
Note introduttive Diagramma di Gantt Questo Ã¨ il diagramma per presentare lo scheduling, ossia da quando a quando Ã¨ eseguito cosa
Esempio gantt</description>
    </item>
    <item>
      <title>Note sullâ€™architettura</title>
      <link>https://flecart.github.io/notes/note-sullarchitettura/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://flecart.github.io/notes/note-sullarchitettura/</guid>
      <description>Interrupt Descrizione iniziale ðŸŸ© Di interrupt e trap se nâ€™Ã¨ parlato un pÃ² in Livello ISA di architettura, ora andiamo ad approfondire come viene gestito a livello SO.
Un interrupt Ã¨ un segnale che viene mandato o da un dispositivo hardware (di solito dopo la fine di un processo input output) oppure da software, in questo caso viene chiamato trap che Ã¨ un interrupt software sincrono..
Slide Interrupt Hardware e software</description>
    </item>
    <item>
      <title>Programmi Concorrenti</title>
      <link>https://flecart.github.io/notes/programmi-concorrenti/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://flecart.github.io/notes/programmi-concorrenti/</guid>
      <description>Vorremmo cercare di stabilire una teoria riguardante programmi che vengono eseguiti appunto concorrentemente, senza una esecuzione classica uno dpo lâ€™altro
Esempio mini-programma rallentamento
#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;pthread.h&amp;gt; void test(void *s) { for (int i = 0; i &amp;lt; 10; i++) { printf(&amp;#34;%s\n&amp;#34;, s); for (int j = 0; j &amp;lt; 100000000; j++); } } int main(int argc, char *argv[]) { pthread_t t1, t2; pthread_create(&amp;amp;t1, NULL, (void *)test, &amp;#34;Uno&amp;#34;); pthread_create(&amp;amp;t2, NULL, (void *)test, &amp;#34;Due&amp;#34;); pthread_join(t1, NULL); pthread_join(t2, NULL); } Example output:</description>
    </item>
    <item>
      <title>Gestione delle risorse</title>
      <link>https://flecart.github.io/notes/gestione-delle-risorse/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://flecart.github.io/notes/gestione-delle-risorse/</guid>
      <description>Gestione delle risorse Introduzione Definizione classe, fungibilitÃ  Classe di risorse sono un insieme di risorse fra loro equivalenti (nel senso che uno puÃ² rimpiazzare lâ€™uso dell&amp;rsquo;altro), anche detti fungibili.
Statico o dinamico Anche in economia ci sono tali definizioni! Queste risorse possono essere allocate staticamente o dinamicamente, in modo simile a quanto abbiamo detto in Gestione della memoria.
Statico quando giÃ  in fase di compilazione del processo, o di avviamento del processo gli dÃ² la memoria, e quella sarÃ  per tutti il tempo della sua vita.</description>
    </item>
    <item>
      <title>Architettura software del OS</title>
      <link>https://flecart.github.io/notes/architettura-software-del-os/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://flecart.github.io/notes/architettura-software-del-os/</guid>
      <description>A seconda dell&amp;rsquo;utilizzatore lâ€™OS puÃ² essere molte cose, come solamente lâ€™interfaccia se sei un programmatore, servizi (se sei un utente, ma gran parte dei servizi sono astratti e l&amp;rsquo;utente ne puÃ² anche essere a non-conoscenza).
Ma se sei un programmatore OS ti interessa capire le componenti principali dellâ€™OS
Slide componenti OS alto livello Introduzione sui componenti (salto) Questa parte la salto perchÃ© Ã¨ una descrizione molto generale di cosa si occupa Lâ€™os verso drivers, processi, filesystem I/O, quindi non Ã¨ molto importante</description>
    </item>
    <item>
      <title>Filesystem</title>
      <link>https://flecart.github.io/notes/filesystem/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://flecart.github.io/notes/filesystem/</guid>
      <description>PerchÃ© filesystem? Questa Ã¨ l&amp;rsquo;idea presa dall&amp;rsquo;archivio, come se fosse un ufficio che deve tenere delle pratiche ordinate in cartelle e cartelloni.
Lâ€™utilizzo principale Ã¨ dare un interfaccia comune di accesso ai dispositivi. perchÃ© dispositivi diversi hanno sotto modi di accedere diversi, questa interfaccia facilita molto l&amp;rsquo;accesso.
Informazioni dei files (5+) ðŸŸ¨ Il file Ã¨ lâ€™unitÃ  logica di memorizzazione. il formato che c&amp;rsquo;Ã¨ dentro Ã¨ gestito dall&amp;rsquo;applicazione, non dal file system!</description>
    </item>
    <item>
      <title>Introduzione SO</title>
      <link>https://flecart.github.io/notes/introduzione-so/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://flecart.github.io/notes/introduzione-so/</guid>
      <description>Scopi del sistema operativo ðŸŸ© Un sistema operativo Ã¨ una astrazione sul HW che permette di
Gestire lâ€™esecuzione di piÃ¹ programmi assieme (concorrenza), tramite virtualizzazione CPU e Memoria Gestire le risorse (Quindi I/O, RAM, Memoria, Networking) Fornisce una interfaccia di programmazione (API) molto piÃ¹ generale e potente, in grado di astrarre da dettagli di livello basso, vicini allâ€™Hardware (come device drivers). Quindi in breve il SO Ã¨ n programma che crea un ambiente civile per i programmi in cui interagire, e facilita molto il lavoro al programmatore per la sua interfaccia nuova.</description>
    </item>
    <item>
      <title>Processi e thread</title>
      <link>https://flecart.github.io/notes/processi-e-thread/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://flecart.github.io/notes/processi-e-thread/</guid>
      <description>Il processo e la gestione dell&amp;rsquo;esecuzione Ã¨ uno dei compiti principali dei sistemi operativi. Lo vuole fare in maniera efficace ed efficiente, come descritto in Note sullâ€™architettura.
Slide schema generale tabelle
Processi Il process control block Ã¨ la struttura di dati principali da comprendere.
Ha una tabella dei file aperti, che sono dei file descriptor (all&amp;rsquo;interno della propria struttura di dati), riferiti a una tabella dell&amp;rsquo;interno sistema credo, e questi puntano a un VNode che permette di localizzarlo nella memoria secondaria.</description>
    </item>
    <item>
      <title>Memoria virtuale</title>
      <link>https://flecart.github.io/notes/memoria-virtuale/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://flecart.github.io/notes/memoria-virtuale/</guid>
      <description>Memoria virtuale PerchÃ© Ã¨ utile la MV? ðŸŸ¨- I programmi non usano tutta la memoria, ma pensano di averla tutta disponibile dal suo punto di vista. L&amp;rsquo;idea principale Ã¨ che molte zone di memoria sono inutili per lungo tempo, possono essere utilizzati per altro.
caricamento codice dinamico Per esempio anche a caricare il codice di un compilatore Ã¨ diviso in fasi, se andiamo a caricare tutto, stiamo utilizzando solo un pezzo piccolo, tanta inefficienza, se una pagina contiene una parte del compilatore potrei caricare in memoria solamente le parti eseguite sul momento, giusto per fare un esempio diciamo.</description>
    </item>
  </channel>
</rss>
