<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>üìíDistributed-Systems on X. Angelo Huang&#39;s Blog</title>
    <link>https://flecart.github.io/tags/distributed-systems/</link>
    <description>Recent content in üìíDistributed-Systems on X. Angelo Huang&#39;s Blog</description>
    <image>
      <title>X. Angelo Huang&#39;s Blog</title>
      <url>https://flecart.github.io/images/papermod-cover.png</url>
      <link>https://flecart.github.io/images/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <atom:link href="https://flecart.github.io/tags/distributed-systems/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Syncronous model</title>
      <link>https://flecart.github.io/notes/syncronous-model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://flecart.github.io/notes/syncronous-model/</guid>
      <description>Introduction Da ricordare il &amp;ldquo;The State Machine Replication (SMR) Problem&amp;rdquo; in Consensus protocols che √® importantissimo per comprendere questa parte.
Storia locale Transazioni al singolo noto Problema del sync fra tutti questi nodi.
Goal of SMR solution in blockchains Andiamo a considerare alcune propriet√† di safety e liveness Programmi Concorrenti
Consistenza i nodi devono essere daccordo su quale transazione mettere prima e dopo ‚Üí stessa storia per tutte le transazioni. (con la possibilit√† di alcuni nodi che siano indietro, ma solo prefisso!</description>
    </item>
    <item>
      <title>Introduzione a blockchain</title>
      <link>https://flecart.github.io/notes/introduzione-a-blockchain/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://flecart.github.io/notes/introduzione-a-blockchain/</guid>
      <description>Blockchain stack Vogliamo andare ora a descrivere la stack delle blockchain, in modo simile a quanto fatto con le internet, perch√© anche qui possiamo organizzarlo a stack!
Nota: le astrazioni fra questi layer non sono definiti bene come osi osint.
Layer - 0 Internet Internet (semi-reliable point-to-point communication) and cryptography (specifically, cryptographic hash functions and secure digital signatures).
Layer - 1 Consensus Ci concentreremo sui protocolli di questo per la maggior parte di quanto faremo!</description>
    </item>
    <item>
      <title>Consensus protocols</title>
      <link>https://flecart.github.io/notes/consensus-protocols/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://flecart.github.io/notes/consensus-protocols/</guid>
      <description>Introduzione Vogliamo tenere in modo sincronizzato alcune macchine, questo √® il nostro obiettivo. Questo √® un problema abbastanza difficile‚Ä¶ Come tenere in sync se ci sono alcuni nodi maligni o la rete che non √® bona?
Assunzioni principali (2) Esiste internet Esiste Crittografia Queste sono le assunzioni che non saranno mai rilassate per l‚Äôintero corso, diciamo che sono la nostra base su cui possiamo andare a costruire la base per il nostro studio.</description>
    </item>
    <item>
      <title>Replication and consistency</title>
      <link>https://flecart.github.io/notes/replication-and-consistency/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://flecart.github.io/notes/replication-and-consistency/</guid>
      <description>Replication and consistency Introduzione Ci sono due vantaggi principali nella replicazione dei dati
Velocit√† Vicinanza geografica (quindi meno tempo ad andare a tornare) Maggiore computazione, quindi avere molti pi√π processori che cercano di offrire lo stesso servizio. Affidabilit√† Cos√¨ se una sede diventa corrotta, posso avere abbondanza, avere una copia da una altra parte, cos√¨ non perdo le informazioni! Se una macchina cade in errore, ho altre macchine che lo sostituiscono!</description>
    </item>
    <item>
      <title>Goals of Distributed systems</title>
      <link>https://flecart.github.io/notes/goals-of-distributed-systems/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://flecart.github.io/notes/goals-of-distributed-systems/</guid>
      <description>Dependable systems Introduzione Possiamo individuare alcune propriet√† dei sistemi distribuiti. Per√≤ non siamo riusciti a renderli logicamente validi. Sono ancora un p√≤ misti di linguaggio naturale e della sua ambiguit√†! Comunque possiamo ridurci per guardare quanto un sistema sia affidabile a guardare poche sue caratteristiche precise.
Caratteristiche fondamentali (4) Queste propriet√† sono pensate naturalmente caratterizzanti dei sistemi. In particolare dovrebbero essere tutti misurabili.
Availability
Che risponde nell‚Äôistante in cui fai una richiesta.</description>
    </item>
  </channel>
</rss>
