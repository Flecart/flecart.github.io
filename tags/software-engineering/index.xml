<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Software-Engineering on X. Angelo Huang&#39;s Blog</title>
    <link>https://flecart.github.io/tags/software-engineering/</link>
    <description>Recent content in Software-Engineering on X. Angelo Huang&#39;s Blog</description>
    <image>
      <title>X. Angelo Huang&#39;s Blog</title>
      <url>https://flecart.github.io/images/papermod-cover.png</url>
      <link>https://flecart.github.io/images/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <atom:link href="https://flecart.github.io/tags/software-engineering/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Requisiti e backlog del software</title>
      <link>https://flecart.github.io/notes/requisiti-e-backlog-del-software/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://flecart.github.io/notes/requisiti-e-backlog-del-software/</guid>
      <description>Introduzione sui requisiti del software Note introduttive In linguaggio naturale (dizionario) ðŸŸ¥+ Sono tutte le qualitÃ  necessarie per uno scopo ben determinato.
Secondo il prof. I requisiti sono dei desideri ossia ciÃ² che idealmente vorresti riguardo qualcosa (nel nostro caso il software). Ma credo sia anche una tendenza italiana di fare le cose meglio possibile senza mai soddisfare tutto
Functional requirements ðŸŸ© Sono ciÃ² che permetterÃ  di fare il sistema</description>
    </item>
    <item>
      <title>Unified Modeling Language</title>
      <link>https://flecart.github.io/notes/unified-modeling-language/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://flecart.github.io/notes/unified-modeling-language/</guid>
      <description>Cosa Ã¨ UML Ã¨ un linguaggio di modelling (molto vecchio) ma ancora di continua evoluzione, da un punto di vista storico Ã¨ nato insieme ai concetti di Object Oriented Programming che ora Ã¨ molto presente all&amp;rsquo;interno dell&amp;rsquo;industria, descritto bene in Classi OOP, anche se in questa occasione sviluppata in maniera molto piÃ¹ intuitiva (grafica).
PerchÃ© serve ðŸŸ© Per cercare di comunicare quanto necessario riguardo struttura e dinamicitÃ  dell&amp;rsquo;architettura.
Struttura di UML Structural Diagram ðŸŸ¨++ These diagrams focus on representing the static structure of a system.</description>
    </item>
    <item>
      <title>General SWE principles</title>
      <link>https://flecart.github.io/notes/general-swe-principles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://flecart.github.io/notes/general-swe-principles/</guid>
      <description>This small note sections tries to fix 5 important concepts in software engineering
Sub-system and modules ðŸŸ© We need to differentiate from sub-system, which is a part of a system that tries to achieve some objective, and a module, which is more language specific way of saying imported file, or set of functions or classes.
Information hiding ðŸŸ© This is a very important principle present in object oriented programming. Within this philosophy we should be able to access only public methods or data, this allows the construction of abstractions that allow us to think at a higher level.</description>
    </item>
    <item>
      <title>System Design</title>
      <link>https://flecart.github.io/notes/system-design/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://flecart.github.io/notes/system-design/</guid>
      <description>NOTA: tolgo dalle note perchÃ© non mi sembra importante.
Introduction to system design Packages vs diagrams ðŸŸ©- Packages fisica implementazione, perchÃ© Ã¨ una cosa utile per lo sviluppo Diagrams logica visualizzazione perchÃ© aiuta solamente a comprendere meglio come funziona il sistema in toto. Components What is a component (3) ðŸŸ¨ Ãˆ una entitÃ  totalmente indipendente che funziona a sÃ©, un esempio Ã¨ il dll, dynamically loaded libraries presente nei sistemi di windows.</description>
    </item>
    <item>
      <title>Design patterns</title>
      <link>https://flecart.github.io/notes/design-patterns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://flecart.github.io/notes/design-patterns/</guid>
      <description>Introduction to design patterns Introduzione personale ðŸŸ© I design patterns sono simili a dei plug and play, ossia delle soluzioni che hanno funzionato bene in passato e che sono ora riutilizzati. Solitamente dovrebbe essere una abilitÃ  implicita, cioÃ¨ un buon programmatore Ã¨ in grado di fare senza pensarci, dovrebbe essere automatico. Infatti quando uno fa il design non lo fa esplitamente seguendo un certo modello, ma farlo solitamente risulta utile per guidare il processo.</description>
    </item>
    <item>
      <title>Modelli Lineari di sviluppo</title>
      <link>https://flecart.github.io/notes/modelli-lineari-di-sviluppo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://flecart.github.io/notes/modelli-lineari-di-sviluppo/</guid>
      <description>Introduzione ai modelli lineari Processi di sviluppo Definizione Lâ€™insieme strutturato di attivitÃ , eventi, documenti e procedure necessari per la costruzione di un sistema software
Cosa viene descritto (4) ðŸŸ© Questo Ã¨ proprio quanto vuole studiare l&amp;rsquo;ingegneria del software -&amp;gt; metodi di sviluppo, in modo da portare i migliori risultati possibile.
Nella formazione classica va a definire 4 concetti (soprattutto utili nel lavoro di gruppo, al fine di comunicare nella maniera piÃ¹ efficace):</description>
    </item>
    <item>
      <title>La qualitÃ  del software</title>
      <link>https://flecart.github.io/notes/la-qualit%C3%A0-del-software/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://flecart.github.io/notes/la-qualit%C3%A0-del-software/</guid>
      <description>Dato che il software sta diventando sempre piÃ¹ diffuso, diventa sempre piÃ¹ importante andare a definire delle metriche che possano garantirne la qualitÃ , ossia la non frequenza di errori o bug che possono in qualche modo limitarne la qualitÃ .
Error, Fault and Failure Secondo la definizione esatta data da IEEE, questi tre termini hanno un significato ben specifico, molto diverso.
Error, sono comportamenti non previsti da un comportamento dell&amp;rsquo;utente, oppure il programmatore capisce male le specifiche.</description>
    </item>
    <item>
      <title>Scrum Method</title>
      <link>https://flecart.github.io/notes/scrum-method/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://flecart.github.io/notes/scrum-method/</guid>
      <description>Introduzione (idea principale) In breve: essence card ðŸŸ©- Giallo = Prodotto. Metafora staffetta-rugby ðŸŸ© Con altri metodi si fanno produzioni stile staffetta, ossia un membro sta fermo, finchÃ© non ha il testimone e poi si uccide correndo&amp;hellip; Il metodo piÃ¹ utile ispirato a scrum Ã¨ rugby, che tutti si muovo insieme collaborando. Un po&amp;rsquo; di tutto Ã¨ fatto durante lo sprint
Cicli di base (3) ðŸŸ© Planning: in cui vengono scelti i task da eseguire durante questo sprint, solitamente questo viene preso da un subset dei task descritti dal product owner.</description>
    </item>
    <item>
      <title>Modelli AGILE</title>
      <link>https://flecart.github.io/notes/modelli-agile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://flecart.github.io/notes/modelli-agile/</guid>
      <description>SocialitÃ  dello sviluppo del software (3) ðŸŸ¨- Si assume che
Ãˆ difficile assegnarsi i compiti, bisogni di utenti, tempi di consegna (+ persone difficile) Ãˆ facile scrivere software (almeno software classico, e non computazione scientifica) La gente sia brava tecnicamente che socialmente Ã¨ una cosa rara VS Waterfall (3) ðŸŸ¨++ Pianificare tutto come viene descritto nel modello del waterfall non Ã¨ possibile. Per i seguenti motivi
Non Ã¨ chiaro cosa vuole l&amp;rsquo;utente finale (quindi sarebbe meglio avere feedback continuo).</description>
    </item>
  </channel>
</rss>
