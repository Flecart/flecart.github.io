<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Machine-Perception on X. Angelo Huang&#39;s Blog</title>
    <link>https://flecart.github.io/tags/machine-perception/</link>
    <description>Recent content in Machine-Perception on X. Angelo Huang&#39;s Blog</description>
    <image>
      <title>X. Angelo Huang&#39;s Blog</title>
      <url>https://flecart.github.io/images/papermod-cover.png</url>
      <link>https://flecart.github.io/images/papermod-cover.png</link>
    </image>
    <generator>Hugo -- 0.143.1</generator>
    <language>en</language>
    <atom:link href="https://flecart.github.io/tags/machine-perception/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Egocentric Vision</title>
      <link>https://flecart.github.io/notes/egocentric-vision/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://flecart.github.io/notes/egocentric-vision/</guid>
      <description>&lt;p&gt;Egocentric vision is a sub-field of computer vision that studies vision understanding from a centered point of view, that typical of animals.
One historical thing is MIT 1997 they had to bring around very heavy cameras. Now we have glasses. Other examples of egocentric vision are cars with cameras that see their surrounding, or robots equipped with cameras mimicking human vision.
The difference of egocentric vision compared to standard vision techniques is the high &lt;em&gt;variability&lt;/em&gt; and &lt;em&gt;instability&lt;/em&gt; of the video, and the concept of movement and interactions inside the image. Standard computer vision is &lt;em&gt;disembodied&lt;/em&gt; and controlled field of view.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Convolutional Neural Network</title>
      <link>https://flecart.github.io/notes/convolutional-neural-network/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://flecart.github.io/notes/convolutional-neural-network/</guid>
      <description>&lt;h2 id=&#34;introduction-to-convolutional-nn&#34;&gt;Introduction to Convolutional NN&lt;/h2&gt;
&lt;h4 id=&#34;design-goals&#34;&gt;Design Goals&lt;/h4&gt;
&lt;p&gt;We want to be invariant to some transformations but also at the same time to be specific to some thing.
Convolutional Neural Networks (CNNs) are a class of deep neural networks that are particularly effective for image processing tasks. They are designed to automatically and adaptively learn spatial hierarchies of features from images.
Compared to standard Fully connected &lt;a href=&#34;https://flecart.github.io/notes/neural-networks&#34;&gt;Neural Networks&lt;/a&gt;, they reuse weights, making their number of parameter much fewer.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Parametric Human Body Models</title>
      <link>https://flecart.github.io/notes/parametric-human-body-models/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://flecart.github.io/notes/parametric-human-body-models/</guid>
      <description>&lt;h3 id=&#34;an-historical-perspective&#34;&gt;An historical perspective&lt;/h3&gt;
&lt;h4 id=&#34;the-origins-of-motion-capture&#34;&gt;The origins of motion capture&lt;/h4&gt;
&lt;p&gt;One of the earliest starts of &lt;em&gt;motion capturing&lt;/em&gt; is the famous horse in 1878 in motion &amp;ldquo;video&amp;rdquo;. This was the start of all the modern cameras. One of the earliest human body motion capture was in military for moving efficiency purposes in 1883. &lt;a href=&#34;https://www.scienceandmediamuseum.org.uk/objects-and-stories/surprising-origins-motion-capture&#34;&gt;This&lt;/a&gt; website has many historical resources on the topic.
The problem is still a problem in modern times. If we want to create models to mimic humans, it surely could be nice to understand how humans move and think. This is the general line of though of this line of research.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Transformers</title>
      <link>https://flecart.github.io/notes/transformers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://flecart.github.io/notes/transformers/</guid>
      <description>&lt;p&gt;Transformers, introduced in NLP language translation in &lt;a href=&#34;http://arxiv.org/abs/1706.03762&#34;&gt;(Vaswani et al. 2017)&lt;/a&gt;, are one of the cornerstones of modern deep learning. For this reason, it is quite important to understand how they are done.&lt;/p&gt;
&lt;h3 id=&#34;introduction-to-transformers&#34;&gt;Introduction to Transformers&lt;/h3&gt;
&lt;p&gt;Transformers are called in this manner because they &lt;em&gt;transform&lt;/em&gt; the input data space into another with the &lt;em&gt;same dimensionality&lt;/em&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The goal of the transformation is that the new space will have a richer internal representation that is better suited to solving downstream tasks. &lt;a href=&#34;https://link.springer.com/10.1007/978-3-031-45468-4&#34;&gt;(Bishop &amp;amp; Bishop 2024)&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Advanced 3D Representations</title>
      <link>https://flecart.github.io/notes/advanced-3d-representations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://flecart.github.io/notes/advanced-3d-representations/</guid>
      <description>&lt;h3 id=&#34;3d-representations&#34;&gt;3D representations&lt;/h3&gt;
&lt;p&gt;In this section, we present some of the most common 3D representations used in computer graphics and computer vision. Each representation has its own advantages and disadvantages, and the choice of representation often depends on the specific application.&lt;/p&gt;
&lt;h4 id=&#34;voxels&#34;&gt;Voxels&lt;/h4&gt;
&lt;p&gt;With voxels we &lt;strong&gt;discretize&lt;/strong&gt; 3D space into a 3d grid, it is an &lt;em&gt;intuitive&lt;/em&gt; manner to represent the data, but it has limited resolution.
It needs $\mathcal{O}(n^{3})$ memory.&lt;/p&gt;
&lt;h4 id=&#34;points-and-volumetric-primitives&#34;&gt;Points and Volumetric primitives&lt;/h4&gt;
&lt;p&gt;We can discretize surfaces into 3D points.
Yet, this does not model &lt;em&gt;connectivity&lt;/em&gt;, and might vary from frame to frame if it is a video.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Neural Networks</title>
      <link>https://flecart.github.io/notes/neural-networks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://flecart.github.io/notes/neural-networks/</guid>
      <description>&lt;h2 id=&#34;introduction-a-neuron&#34;&gt;Introduction: a neuron&lt;/h2&gt;
&lt;p&gt;I am lazy, so I&amp;rsquo;m skipping the introduction for this set of notes. Look at Andrew Ng&amp;rsquo;s Coursera course for this part (&lt;a href=&#34;https://cs229.stanford.edu/main_notes.pdf&#34;&gt;here&lt;/a&gt; are the notes). Historical paper is &lt;a href=&#34;https://psycnet.apa.org/record/1959-09865-001&#34;&gt;(Rosenblatt 1958)&lt;/a&gt;.
One can view a perceptron to be a &lt;a href=&#34;https://flecart.github.io/notes/log-linear-models&#34;&gt;Log Linear Models&lt;/a&gt; with the temperature of the softmax that goes to 0 (so that it is an argmax).
Trained with a stochastic gradient descent with a batch of 1 (this is called the perceptron update rule, see &lt;a href=&#34;https://flecart.github.io/notes/the-perceptron-model&#34;&gt;The Perceptron Model&lt;/a&gt;).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Normalizing Flows</title>
      <link>https://flecart.github.io/notes/normalizing-flows/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://flecart.github.io/notes/normalizing-flows/</guid>
      <description>&lt;p&gt;Normalizing flows have both  latent space and can produce tractable &lt;strong&gt;explicit&lt;/strong&gt; probability distributions (closer to &lt;a href=&#34;https://flecart.github.io/notes/autoregressive-modelling&#34;&gt;Autoregressive Modelling&lt;/a&gt;, they have tractable distributions, but not a latent space). This means we are able to get the likelihoods of a certain sample.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This approach to modelling a flexible distribution is called a normalizing flow because the transformation of a probability distribution through a sequence of mappings is somewhat analogous to the flow of a fluid. From &lt;a href=&#34;https://link.springer.com/10.1007/978-3-031-45468-4&#34;&gt;(Bishop &amp;amp; Bishop 2024)&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Generative Adversarial Networks</title>
      <link>https://flecart.github.io/notes/generative-adversarial-networks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://flecart.github.io/notes/generative-adversarial-networks/</guid>
      <description>&lt;p&gt;Generative Adversarial Network has been introduced in 2014 by Ian Goodfellow (at that time they where still gray and white). Now the images have been improved with &lt;a href=&#34;https://flecart.github.io/notes/diffusion-models&#34;&gt;Diffusion Models&lt;/a&gt;, that can be considered the new paradigm. This idea has been considered by Yann LeCun as one of the most important ideas. Nowadays (2025), they are still used for super-resolution and other applications, but it has still some limitations (mainly stability), and now has good competition against other models.
The resolution purported by GAN is much higher than VAE (see &lt;a href=&#34;https://flecart.github.io/notes/autoencoders#variational-autoencoders&#34;&gt;Autoencoders#Variational Autoencoders&lt;/a&gt;). This is a easy plugin to improve the results of other models (VAE, flow, Diffusion). Also ChatGPT has some sort of adversarial learning for example, not explained in the same manner as here.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Autoregressive Modelling</title>
      <link>https://flecart.github.io/notes/autoregressive-modelling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://flecart.github.io/notes/autoregressive-modelling/</guid>
      <description>&lt;h3 id=&#34;on-autoregressivity&#34;&gt;On Autoregressivity&lt;/h3&gt;
&lt;p&gt;The main idea of autoregressivity is to use previous prediction to predict the next state.&lt;/p&gt;
&lt;h4 id=&#34;the-autoregressive-property&#34;&gt;The Autoregressive property&lt;/h4&gt;
&lt;p&gt;Autoregressive models model a joint distribution of aleatoric variables by assuming a chain rule like decomposition:&lt;/p&gt;
$$
p(x) = \prod_{i=1}^{n} p(x_i | x_{1:i-1})
$$&lt;p&gt;
If we assume independence between the variables, we don&amp;rsquo;t need many variables to model it $2T$, but this assumption is too strong.
If we just use a tabular approach, we&amp;rsquo;ll have a combinatorial explosion: we will have about $2^{T - 1}$ possible states (if we assume the aleatoric variables are binary, and we are creating a table for each intermediate variable).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Recurrent Neural Networks</title>
      <link>https://flecart.github.io/notes/recurrent-neural-networks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://flecart.github.io/notes/recurrent-neural-networks/</guid>
      <description>&lt;p&gt;Recurrent Neural Networks allows us to model &lt;em&gt;arbitrarily long&lt;/em&gt; sequence dependencies, at least in theory (this is also why they seem a very nice choice in theory for time series). This is very handy, and has many interesting theoretical implication. But here we are also interested in the practical applicability, so we may need to analyze common architectures used to implement these models, the main limitation and drawbacks, the nice properties and some applications.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Backpropagation</title>
      <link>https://flecart.github.io/notes/backpropagation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://flecart.github.io/notes/backpropagation/</guid>
      <description>&lt;p&gt;Backpropagation is perhaps the most important algorithm of the 21st century. It is used everywhere in machine learning and is also connected to computing marginal distributions. This is why all machine learning scientists and data scientists should understand this algorithm very well.
An important observation is that this algorithm is &lt;strong&gt;linear&lt;/strong&gt;: the time complexity is the same as the forward pass. Derivatives are unexpectedly cheap to calculate. This took a lot of time to discover. See &lt;a href=&#34;https://colah.github.io/posts/2015-08-Backprop/&#34;&gt;colah&amp;rsquo;s blog&lt;/a&gt;.
&lt;a href=&#34;https://youtu.be/VMj-3S1tku0?si=wRCObFw7woZTwU56&#34;&gt;Karpathy&lt;/a&gt; has a nice resource for this topic too!
&lt;a href=&#34;https://www.youtube.com/watch?v=zUazLXZZA2U&amp;list=PLoROMvodv4rMiGQp3WXShtMGgzqpfVfbU&#34;&gt;Stanford lecture&lt;/a&gt; on backpropagation is another resource.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Perceptron Model</title>
      <link>https://flecart.github.io/notes/the-perceptron-model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://flecart.github.io/notes/the-perceptron-model/</guid>
      <description>&lt;p&gt;The &lt;strong&gt;perceptron&lt;/strong&gt; is a fundamental binary linear classifier introduced by &lt;a href=&#34;https://psycnet.apa.org/record/1959-09865-001&#34;&gt;(Rosenblatt 1958)&lt;/a&gt;. It maps an input vector $\mathbf{x} \in \mathbb{R}^n$ to an output $y \in \{0,1\}$ using a weighted sum followed by a threshold function.&lt;/p&gt;
&lt;h3 id=&#34;introduction-to-the-perceptron&#34;&gt;Introduction to the Perceptron&lt;/h3&gt;
&lt;h4 id=&#34;a-mathematical-model&#34;&gt;A mathematical model&lt;/h4&gt;
&lt;p&gt;Given an input vector $\mathbf{x} = (x_1, x_2, \dots, x_n)$ and a weight vector $\mathbf{w} = (w_1, w_2, \dots, w_n)$, the perceptron computes:&lt;/p&gt;
$$
z = \mathbf{w}^\top \mathbf{x} + b = \sum_{i=1}^{n} w_i x_i + b
$$$$
y = f(z) = 
\begin{cases}
1, &amp; \text{if } z \geq 0 \\
0, &amp; \text{otherwise}
\end{cases}
$$&lt;h4 id=&#34;learning-rule&#34;&gt;Learning Rule&lt;/h4&gt;
&lt;p&gt;Given a labeled dataset $\{ (\mathbf{x}^{(i)}, y^{(i)}) \}_{i=1}^{m}$, the perceptron uses the following weight update rule for misclassified samples ($y^{(i)} \neq f(\mathbf{w}^\top \mathbf{x}^{(i)} + b)$):&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
