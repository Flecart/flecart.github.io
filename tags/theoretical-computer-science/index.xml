<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Theoretical-Computer-Science on X. Angelo Huang&#39;s Blog</title>
    <link>http://localhost:1313/tags/theoretical-computer-science/</link>
    <description>Recent content in Theoretical-Computer-Science on X. Angelo Huang&#39;s Blog</description>
    <image>
      <title>X. Angelo Huang&#39;s Blog</title>
      <url>http://localhost:1313/images/papermod-cover.png</url>
      <link>http://localhost:1313/images/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <atom:link href="http://localhost:1313/tags/theoretical-computer-science/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Time Complexity</title>
      <link>http://localhost:1313/notes/time-complexity/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/time-complexity/</guid>
      <description>Introduction to Time Complexity This note will build upon know techniques of algorithms analysis explained in Notazione Asintotica. We will need big-$O$ notation and $o$ notation. L&amp;rsquo;idea √® che il problema di decisione √® decidibile se limito la lunghezza del teorema. Simile al numero di Chaitin, che non √® computabile, ma √® approssimabile quanto si vuole. In un certo senso √® computabile. The general idea is to ask how the function $\varphi$ that maps the longest $n$ proof to the number of steps of computation behaves.</description>
    </item>
    <item>
      <title>Halting Theorem and Reducibility</title>
      <link>http://localhost:1313/notes/halting-theorem-and-reducibility/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/halting-theorem-and-reducibility/</guid>
      <description>Halting theorem Questo √® un problema fondamentale, che abbiamo trattato anche in Fondamenti teorica#Halting problem, ma qui lo ritrattiamo, perch√© cos√¨ lo rifacciamo per bene. In parte √® stato trattato anche al corso di Logica.
Enunciato Halting theorem Questo √® molto simile a quanto presente sul (Sipser 2012). Ossia consideriamo il linguaggio $$ HALT = \left\{ \langle x, y \rangle : y = code(M),M \text{ si ferma su } x\right\} $$ Dimostrazione Halting theorem La parte del s√¨ √® facile perch√© basta eseguirlo e vedere che si ferma (quindi abbiamo una La macchina di Turing#La macchina di Turing universale.</description>
    </item>
    <item>
      <title>La macchina di Turing</title>
      <link>http://localhost:1313/notes/la-macchina-di-turing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/la-macchina-di-turing/</guid>
      <description>Introduzione Note filosofiche (non impo) Bisogna in primo momento cercare di definire cosa √® la computazione e cosa √® un computer. Aristotele faceva la distinzione fra propriet√† essenziali e accidentali. Quelle essenziali sono proprie dell&amp;rsquo;oggetto.
Una sedia pu√≤ essere fatta di legno o di metallo, ma questa propriet√† √® accidentale, ovvero, essa rimane una sedia indipendentemente dal materiale di cui √® fatta.
Solitamente in matematica si prova ad astrarre (vedi Astrazione sul controllo per nota generale sull&amp;rsquo;astrazione).</description>
    </item>
    <item>
      <title>Estensioni di Turing e altre macchine</title>
      <link>http://localhost:1313/notes/estensioni-di-turing-e-altre-macchine/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/estensioni-di-turing-e-altre-macchine/</guid>
      <description>Sono variazioni possibili equivalenti: ‚Ä¢ Nastri addizionali ‚Ä¢ Testine addizionali ‚Ä¢ Nastri infiniti su entrambi i lati ‚Ä¢ Non-determinismo ‚Ä¢ Scelta probabilistica ‚Ä¢ Scelta quantistica
Turing con nastri addizionali Questo √® presente in modo abbastanza facile sul Sipser.
La computazione comincia con l‚Äôinput sul primo nastro, e tutti gli altri nastri vuoti. Macchine di Turing con nastri addizionali In ciascun passo di computazione, ogni testina √© nello stesso stato, ma pu√≤ essere in una posizione diversa, leggere un simbolo differente, e compiere un‚Äôazione diversa.</description>
    </item>
    <item>
      <title>Teorema di Rice</title>
      <link>http://localhost:1313/notes/teorema-di-rice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/notes/teorema-di-rice/</guid>
      <description>Introduction to the Rice Theorem Ci sono molti teoremi che non possono essere decisi, vedere Halting Theorem and Reducibility. Qui andiamo a chiederci quale sia l&amp;rsquo;insieme dei problemi decidibili.
Propriet√† dei linguaggi TM üü© Data una macchina $\mathcal{M}$ definiamo il suo linguaggio come $$ L_{\mathcal{M}} = \left\{ x \in \Sigma^{*}: \mathcal{M} \text{ accetta } x \right\} $$ Allora con questa definizione di linguaggio possiamo dire che una propriet√†, ossia una funzione da tutti i $TM$ possibili a $\left{ 0, 1 \right}$ tale per cui se il linguaggio riconosciuto √® lo stesso, ossia $$ L_{\mathcal{M}} = L_{\mathcal{M}&#39;} \implies P(\mathcal{M}) = P(\mathcal{M}&#39;) $$ Definiamo questa non triviale se esiste una macchina per cui √® 0, e una per cui √® 1 (ossia non √® costante).</description>
    </item>
  </channel>
</rss>
