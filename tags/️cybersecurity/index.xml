<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>üõ°Ô∏èCybersecurity on X. Angelo Huang&#39;s Blog</title>
    <link>https://flecart.github.io/tags/%EF%B8%8Fcybersecurity/</link>
    <description>Recent content in üõ°Ô∏èCybersecurity on X. Angelo Huang&#39;s Blog</description>
    <image>
      <title>X. Angelo Huang&#39;s Blog</title>
      <url>https://flecart.github.io/images/papermod-cover.png</url>
      <link>https://flecart.github.io/images/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <atom:link href="https://flecart.github.io/tags/%EF%B8%8Fcybersecurity/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Wireless attack vectors</title>
      <link>https://flecart.github.io/notes/wireless-attack-vectors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://flecart.github.io/notes/wireless-attack-vectors/</guid>
      <description>In this note we will talk about some common ways to attack wireless based devices.
Jamming This is the easiest way to attack. Just send many signals to make a certain frequency un-usable in our space. But with Frequency hopping this attack is solved. See Tecnologia Wireless#Frequency Hopping But this method could be easily known and observed (enables eavesdropping, against confidentiality, a principle in Security Principles and Tor.) if the initial seed is known.</description>
    </item>
    <item>
      <title>Sicurezza delle reti</title>
      <link>https://flecart.github.io/notes/sicurezza-delle-reti/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://flecart.github.io/notes/sicurezza-delle-reti/</guid>
      <description>Obiettivi della sicurezza (!!!) üü© Vogliamo creare delle reti che abbiamo certe garanzie di sicurezza, soprattutto:
Confidenzialit√†, non vorremmo che il nostro messaggio sia intercettabile e leggibili da persone intermedie Integrit√†: non vogliamo che messaggi possano essere cambiati senza intervento del sender Autenticazione: vorremmo sapere con chi stiamo parlando, e vorremmo essere sicuri che non stiano mentendo sull‚Äôidentit√†. Sicurezza operativa: vorremmo essere in grado di poter continuare a fornire il servizio (quindi non sia possibile dossare, o installare malware che modifichino il comportamento del servizio).</description>
    </item>
    <item>
      <title>Key Exchange protocols</title>
      <link>https://flecart.github.io/notes/key-exchange-protocols/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://flecart.github.io/notes/key-exchange-protocols/</guid>
      <description>Metodi di key exchange
Trusted Key parties (sono come Certificate authorities studiati in Sicurezza delle reti) Merkle Puzzles DH protocol Trusted Third parties Squared Key problem Un problema abbastanza ovvio √® che per storare le chiavi di tutti c&amp;rsquo;√® una necessit√† $O(n^{2})$ on $O(n)$ users Se c&amp;rsquo;√® un trusted key parties il numero delle chiavi si riduce di molto, ritorna ad essere lineare!
Protocols Toy Exchange protocol üü© TTP = Trusted Third party (simile a quanto poi si avr√† in Asymmetric Cryptography) Questa √® la base del servizio di Kerberos!</description>
    </item>
    <item>
      <title>TLS-SSL protocol</title>
      <link>https://flecart.github.io/notes/tls-ssl-protocol/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://flecart.github.io/notes/tls-ssl-protocol/</guid>
      <description>First time we talked about this was in Sicurezza delle reti#Protocollo SSL
SSL Secure socket Layer and TLS add security on the transport layers, wereas IPsec adds it to the network level. So this works on a higher level of abstraction when using the Architettura e livelli 1, 2#Livelli ISO/OSI modes of operation.
SSL is the old version of the TLS protocol. This provides integrity and confidentiality to the communication , see Security Principles and Tor.</description>
    </item>
    <item>
      <title>Security Principles and Tor</title>
      <link>https://flecart.github.io/notes/security-principles-and-tor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://flecart.github.io/notes/security-principles-and-tor/</guid>
      <description>Security principles We have already outlined these principles in Sicurezza delle reti and talked about the concepts of authentication and integrity. Here we try to deepen these concepts and delve a little bit more on the attack vectors These are acronyms, usually called CIA and AAA for infrastructure
Confidentiality This is one concerns about the secrecy of the sent message. We do not want others to be able to access and read what we are doing.</description>
    </item>
    <item>
      <title>Asymmetric Cryptography</title>
      <link>https://flecart.github.io/notes/asymmetric-cryptography/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://flecart.github.io/notes/asymmetric-cryptography/</guid>
      <description>Public Key Encryption We now define a formally what is a public key encryption
Formal definition of Public Key Encryption We define a 3-tuple formed as follows: $(G, E, D)$ where
$G$ is the generator for the private and public keys, from now on identified as $(pk, sk)$ (public key and secret key) $E$ the encryption algorithm, that takes the $pk$ and the message in input $D$ the decryption algorithm, that takes the $sk$ and the cyphertext in input.</description>
    </item>
    <item>
      <title>Block Ciphers</title>
      <link>https://flecart.github.io/notes/block-ciphers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://flecart.github.io/notes/block-ciphers/</guid>
      <description>Utilizzano blocchi per cifra invece che stream generators.
DES 56 bit 3DES 56*3 bit di chiave AES che pu√≤ andare a 128, 196 o 256 Solitamente i stream ciphers studiati in OTP and Stream Ciphers sono pi√π veloci. Data Encryption Standard 1974 da IBM su commissione di NSA in quel periodo era solamente fatta dalla intelligence, non c‚Äôera bisogno di comunicazioni per il pubblico in quel periodo.
1977 - 1998 questo era lo standard per gli stati uniti.</description>
    </item>
    <item>
      <title>Classical Cyphers</title>
      <link>https://flecart.github.io/notes/classical-cyphers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://flecart.github.io/notes/classical-cyphers/</guid>
      <description>Introduzione a Crittografia al corso di crittografia di Christof Paar su Youtube, con aggiunte del corso Unibo.
Classifications and definitions Classification nowadays as many many applications like, and it‚Äôs a increasing important field
Cryptology (2) üü© La branca comunemente riferita come crittografia √® divisa principalmente in due campi crittografia e cryptanalysis in cui una cerca di creare nuovi metodi per cifrare i messaggi, e l‚Äôaltro prova ad attaccare questi messaggi ritrovando il messaggio originale.</description>
    </item>
    <item>
      <title>Memory Corruption</title>
      <link>https://flecart.github.io/notes/memory-corruption/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://flecart.github.io/notes/memory-corruption/</guid>
      <description>First of all, we need to have a strong understanding of how a program allocates memory during its execution. See Memoria, Memoria virtuale and other notes about Nomi e Scope, Gestione della memoria. The thing you have to remember is that
Every new function call allocates a new block, with his local variables. How the calling parameters are stored in the stack How the heap is allocated (common heap algos are in Gestione della memoria) Common attack vectors We use C, as it is the easiest way to show how this could be attacked.</description>
    </item>
    <item>
      <title>OTP and Stream Ciphers</title>
      <link>https://flecart.github.io/notes/otp-and-stream-ciphers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://flecart.github.io/notes/otp-and-stream-ciphers/</guid>
      <description>XOR operation √à una operazione binaria abbastanza semplice per√≤ ci sar√† importante per andare ad analizzare dei cifrari di un certo genere. Come il ONE TIME PAD che faremo fra poco in OTP and Stream Ciphers.
Teorema cifratura con XOR Prendiamo $X$ una variabile aleatoria in $\left\{ 0,1 \right\}^{n}$ uniforme, sia $Y$ una variabile aleatoria su uno stesso dominio come vogliamo. Tali per cui $X, Y$ siano indipendenti Allora avremo che $C = X \oplus Y$ √® una variabile aleatoria uniforme.</description>
    </item>
  </channel>
</rss>
